-- Main GUI Script for GitHub

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local ScrollingFrame = Instance.new("ScrollingFrame")
local WallHackButton = Instance.new("TextButton")
local AimButton = Instance.new("TextButton")
local InfJumpButton = Instance.new("TextButton")
local NameDistanceButton = Instance.new("TextButton")
local NoClipButton = Instance.new("TextButton")
local CloseButton = Instance.new("TextButton")
local UICornerMainFrame = Instance.new("UICorner")
local UICornerButtons = Instance.new("UICorner")
local UICornerCloseButton = Instance.new("UICorner")

-- GUI Properties
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
MainFrame.Size = UDim2.new(0, 300, 0, 500)
MainFrame.Position = UDim2.new(0.1, 0, 0.1, 0)

-- Add UICorner to MainFrame
UICornerMainFrame.CornerRadius = UDim.new(0, 12)
UICornerMainFrame.Parent = MainFrame

ScrollingFrame.Parent = MainFrame
ScrollingFrame.Size = UDim2.new(1, 0, 1, -50)
ScrollingFrame.Position = UDim2.new(0, 0, 0, 50)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 4, 0)

-- Make MainFrame draggable
local dragToggle = nil
local dragInput = nil
local dragStart = nil
local startPos = nil

local function updateInput(input)
	if dragToggle then
		local delta = input.Position - dragStart
		MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end

MainFrame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragToggle = true
		dragStart = input.Position
		startPos = MainFrame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragToggle = false
			end
		end)
	end
end)

MainFrame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
	if input == dragInput and dragToggle then
		updateInput(input)
	end
end)

-- Helper function to apply rainbow effect to buttons
local function rainbowEffect(button)
    spawn(function()
        while true do
            for hue = 0, 1, 0.01 do
                button.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                wait(0.1)
            end
        end
    end)
end

-- Wall Hack Button
WallHackButton.Parent = ScrollingFrame
WallHackButton.Text = "Wall Hacks"
WallHackButton.Size = UDim2.new(0, 250, 0, 50)
WallHackButton.Position = UDim2.new(0, 25, 0, 10)

-- Add UICorner to WallHackButton
UICornerButtons.CornerRadius = UDim.new(0, 12)
local UICornerWallHack = UICornerButtons:Clone()
UICornerWallHack.Parent = WallHackButton

rainbowEffect(WallHackButton)

local wallHackEnabled = false
WallHackButton.MouseButton1Click:Connect(function()
    wallHackEnabled = not wallHackEnabled
    if wallHackEnabled then
        -- Wall hack code (local only, see players through walls)
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                for _, part in pairs(player.Character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.Transparency = 0.5
                        part.BrickColor = BrickColor.new("Bright red")
                        part.CanCollide = false
                    end
                end
            end
        end
    else
        -- Reset transparency and color
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                for _, part in pairs(player.Character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.Transparency = 0
                        part.BrickColor = BrickColor.new("Medium stone grey")
                        part.CanCollide = true
                    end
                end
            end
        end
    end
end)

-- Aim Button
AimButton.Parent = ScrollingFrame
AimButton.Text = "Aim Lock"
AimButton.Size = UDim2.new(0, 250, 0, 50)
AimButton.Position = UDim2.new(0, 25, 0, 70)

-- Add UICorner to AimButton
local UICornerAim = UICornerButtons:Clone()
UICornerAim.Parent = AimButton

rainbowEffect(AimButton)

local aimLockEnabled = false
local targetPlayer = nil -- Store the first locked target
AimButton.MouseButton1Click:Connect(function()
    aimLockEnabled = not aimLockEnabled
    if aimLockEnabled then
        -- Aim lock code (local only, locks onto the first player and doesn't switch)
        local camera = game.Workspace.CurrentCamera
        local localPlayer = game.Players.LocalPlayer

        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= localPlayer and player.Character and not targetPlayer then
                local head = player.Character:FindFirstChild("Head")
                if head then
                    targetPlayer = head
                    break
                end
            end
        end

        game:GetService("RunService").RenderStepped:Connect(function()
            if aimLockEnabled and targetPlayer then
                camera.CFrame = CFrame.new(camera.CFrame.Position, targetPlayer.Position)
            end
        end)
    else
        targetPlayer = nil -- Reset the target when aimlock is turned off
    end
end)

-- Infinite Jump Button
InfJumpButton.Parent = ScrollingFrame
InfJumpButton.Text = "Infinite Jump"
InfJumpButton.Size = UDim2.new(0, 250, 0, 50)
InfJumpButton.Position = UDim2.new(0, 25, 0, 130)

-- Add UICorner to InfJumpButton
local UICornerInfJump = UICornerButtons:Clone()
UICornerInfJump.Parent = InfJumpButton

rainbowEffect(InfJumpButton)

local infJumpEnabled = false
InfJumpButton.MouseButton1Click:Connect(function()
    infJumpEnabled = not infJumpEnabled
    if infJumpEnabled then
        -- Infinite jump code (local only)
        local localPlayer = game.Players.LocalPlayer
        game:GetService("UserInputService").JumpRequest:Connect(function()
            if infJumpEnabled then
                localPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
            end
        end)
    end
end)

-- Name & Distance Button
NameDistanceButton.Parent = ScrollingFrame
NameDistanceButton.Text = "Show Name & Distance"
NameDistanceButton.Size = UDim2.new(0, 250, 0, 50)
NameDistanceButton.Position = UDim2.new(0, 25, 0, 190)

-- Add UICorner to NameDistanceButton
local UICornerNameDistance = UICornerButtons:Clone()
UICornerNameDistance.Parent = NameDistanceButton

rainbowEffect(NameDistanceButton)

local nameDistanceEnabled = false
NameDistanceButton.MouseButton1Click:Connect(function()
    nameDistanceEnabled = not nameDistanceEnabled
    if nameDistanceEnabled then
        -- Display name and distance above players' heads
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                local head = player.Character:FindFirstChild("Head")
                if head then
                    local billboard = Instance.new("BillboardGui")
                    billboard.Adornee = head
                    billboard.Size = UDim2.new(0, 200, 0, 50)
                    billboard.StudsOffset = Vector3.new(0, 2, 0)
                    billboard.AlwaysOnTop = true
                    billboard.Parent = head

                    local nameLabel = Instance.new("TextLabel", billboard)
                    nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
                    nameLabel.Text = player.Name
                    nameLabel.BackgroundTransparency = 1
                    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    nameLabel.TextScaled = true

                    local distanceLabel = Instance.new("TextLabel", billboard)
                    distanceLabel.Size = UDim2.new(1, 0, 0.5, 0)
                    distanceLabel.Position = UDim2.new(0, 0, 0.5, 0)
