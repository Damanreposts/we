-- Function to create the GUI
local function createGUI()
    -- Create GUI
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "PersistentGui" -- Give it a unique name
    local MainFrame = Instance.new("Frame")
    local ScrollingFrame = Instance.new("ScrollingFrame")
    local WallHackButton = Instance.new("TextButton")
    local AimButton = Instance.new("TextButton")
    local InfJumpButton = Instance.new("TextButton")
    local NameDistanceButton = Instance.new("TextButton")
    local NoClipButton = Instance.new("TextButton")
    local CloseButton = Instance.new("TextButton")
    local ToggleButton = Instance.new("TextButton") -- Button to open/close the GUI
    local ShootThroughWallsButton = Instance.new("TextButton") -- New button for shooting through walls
    local UICornerMainFrame = Instance.new("UICorner")
    local UICornerButtons = Instance.new("UICorner")
    local UICornerCloseButton = Instance.new("UICorner")

    -- Parent GUI to PlayerGui
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    MainFrame.Parent = ScreenGui
    MainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Set background to black
    MainFrame.Size = UDim2.new(0, 300, 0, 500)
    MainFrame.Position = UDim2.new(0.1, 0, 0.1, 0)
    MainFrame.Visible = false -- Start with the GUI hidden

    -- Add UICorner to MainFrame
    UICornerMainFrame.CornerRadius = UDim.new(0, 12)
    UICornerMainFrame.Parent = MainFrame

    ScrollingFrame.Parent = MainFrame
    ScrollingFrame.Size = UDim2.new(1, 0, 1, -50)
    ScrollingFrame.Position = UDim2.new(0, 0, 0, 50)
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 5, 0) -- Increased canvas size for more buttons
    ScrollingFrame.ScrollBarThickness = 10

    -- Helper function to apply rainbow effect to buttons
    local function rainbowEffect(button)
        spawn(function()
            while true do
                for hue = 0, 1, 0.01 do
                    button.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                    wait(0.1)
                end
            end
        end)
    end

    -- Draggable GUI function
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function makeDraggable(frame)
        frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                dragStart = input.Position
                startPos = frame.Position

                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        frame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                if dragging then
                    local delta = input.Position - dragStart
                    frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                end
            end
        end)
    end

    -- Initialize GUI
    makeDraggable(MainFrame) -- Make the main frame draggable

    -- Wall Hack Button
    WallHackButton.Parent = ScrollingFrame
    WallHackButton.Text = "Wall Hacks"
    WallHackButton.Size = UDim2.new(0, 250, 0, 50)
    WallHackButton.Position = UDim2.new(0, 25, 0, 10)
    WallHackButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Set button color to black
    WallHackButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text

    -- Add UICorner to WallHackButton
    local UICornerWallHack = UICornerButtons:Clone()
    UICornerWallHack.Parent = WallHackButton

    rainbowEffect(WallHackButton)

    local wallHackEnabled = false
    WallHackButton.MouseButton1Click:Connect(function()
        wallHackEnabled = not wallHackEnabled
        if wallHackEnabled then
            -- Wall hack code (local only, see players through walls)
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player.Character then
                    for _, part in pairs(player.Character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.Transparency = 0.5
                            part.BrickColor = BrickColor.new("Bright red")
                            part.CanCollide = false
                        end
                    end
                end
            end
        else
            -- Reset transparency and color
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player.Character then
                    for _, part in pairs(player.Character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.Transparency = 0
                            part.BrickColor = BrickColor.new("Medium stone grey")
                            part.CanCollide = true
                        end
                    end
                end
            end
        end
    end)

    -- Add your other buttons like AimButton, InfJumpButton, etc. here...
    -- For brevity, I'll skip the code for them as it's unchanged.

    -- Toggle Button
    ToggleButton.Parent = ScreenGui
    ToggleButton.Text = "O" -- Open the GUI
    ToggleButton.Size = UDim2.new(0, 50, 0, 50)
    ToggleButton.Position = UDim2.new(0, 10, 0.5, -25) -- Centered vertically on the left
    ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Set background color to black
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text for visibility

    -- Add UICorner to ToggleButton
    local UICornerToggleButton = Instance.new("UICorner")
    UICornerToggleButton.CornerRadius = UDim.new(0, 12)
    UICornerToggleButton.Parent = ToggleButton

    ToggleButton.MouseButton1Click:Connect(function()
        MainFrame.Visible = not MainFrame.Visible
        ToggleButton.Text = MainFrame.Visible and "C" or "O" -- Change text based on visibility
    end)

    -- Close Button
    CloseButton.Parent = MainFrame
    CloseButton.Text = "X"
    CloseButton.Size = UDim2.new(0, 50, 0, 50)
    CloseButton.Position = UDim2.new(1, -55, 0, 5)
    CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red color for close button

    -- Add UICorner to CloseButton
    UICornerCloseButton.CornerRadius = UDim.new(0, 12)
    UICornerCloseButton.Parent = CloseButton

    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        MainFrame.Visible = false
        ToggleButton.Text = "O" -- Reset toggle button to 'Open' state
    end)
end

-- Keep the GUI persistent after respawn
local player = game.Players.LocalPlayer

-- Function to ensure GUI is re-created on respawn
local function onCharacterAdded(character)
    -- Check if the GUI already exists and re-create it if necessary
    if not player.PlayerGui:FindFirstChild("PersistentGui") then
        createGUI()
    end
end

-- Create the GUI initially
createGUI()

-- Listen to the CharacterAdded event to re-create the GUI on respawn
player.CharacterAdded:Connect(onCharacterAdded)
